<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>perf-bench</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">perf</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">perf Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>perf-bench</refname>
  <refpurpose>General framework for benchmark suites</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<blockquote>
<literallayout><emphasis>perf bench</emphasis> [&lt;common options&gt;] &lt;subsystem&gt; &lt;suite&gt; [&lt;options&gt;]</literallayout>
</blockquote>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>This <emphasis>perf bench</emphasis> command is a general framework for benchmark suites.</simpara>
</refsect1>
<refsect1 id="_common_options">
<title>COMMON OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-f
</term>
<term>
--format=
</term>
<listitem>
<simpara>
Specify format style.
Current available format styles are:
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>default</emphasis>
</term>
<listitem>
<simpara>
Default style. This is mainly for human reading.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<literallayout>
&#10;.ft C&#10;% perf bench sched pipe                      # with no style specified
(executing 1000000 pipe operations between two tasks)
        Total time:5.855 sec
                5.855061 usecs/op
                170792 ops/sec&#10;.ft&#10;
</literallayout>
<variablelist>
<varlistentry>
<term>
<emphasis>simple</emphasis>
</term>
<listitem>
<simpara>
This simple style is friendly for automated
processing by scripts.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<literallayout>
&#10;.ft C&#10;% perf bench --format=simple sched pipe      # specified simple
5.988&#10;.ft&#10;
</literallayout>
</refsect1>
<refsect1 id="_subsystem">
<title>SUBSYSTEM</title>
<variablelist>
<varlistentry>
<term>
<emphasis>sched</emphasis>
</term>
<listitem>
<simpara>
        Scheduler and IPC mechanisms.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>mem</emphasis>
</term>
<listitem>
<simpara>
        Memory access performance.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>all</emphasis>
</term>
<listitem>
<simpara>
        All benchmark subsystems.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<refsect2 id="_suites_for_emphasis_sched_emphasis">
<title>SUITES FOR <emphasis>sched</emphasis></title>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">messaging</emphasis>
</term>
<listitem>
<simpara>
Suite for evaluating performance of scheduler and IPC mechanisms.
Based on hackbench by Rusty Russell.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<refsect3 id="_options_of_emphasis_role_strong_messaging_emphasis">
<title>Options of <emphasis role="strong">messaging</emphasis></title>
<variablelist>
<varlistentry>
<term>
-p
</term>
<term>
--pipe
</term>
<listitem>
<simpara>
Use pipe() instead of socketpair()
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-t
</term>
<term>
--thread
</term>
<listitem>
<simpara>
Be multi thread instead of multi process
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-g
</term>
<term>
--group=
</term>
<listitem>
<simpara>
Specify number of groups
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-l
</term>
<term>
--loop=
</term>
<listitem>
<simpara>
Specify number of loops
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect3>
<refsect3 id="_example_of_emphasis_role_strong_messaging_emphasis">
<title>Example of <emphasis role="strong">messaging</emphasis></title>
<literallayout>
&#10;.ft C&#10;% perf bench sched messaging                 # run with default
options (20 sender and receiver processes per group)
(10 groups == 400 processes run)

      Total time:0.308 sec

% perf bench sched messaging -t -g 20        # be multi-thread, with 20 groups
(20 sender and receiver threads per group)
(20 groups == 800 threads run)

      Total time:0.582 sec&#10;.ft&#10;
</literallayout>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">pipe</emphasis>
</term>
<listitem>
<simpara>
Suite for pipe() system call.
Based on pipe-test-1m.c by Ingo Molnar.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect3>
<refsect3 id="_options_of_emphasis_role_strong_pipe_emphasis">
<title>Options of <emphasis role="strong">pipe</emphasis></title>
<variablelist>
<varlistentry>
<term>
-l
</term>
<term>
--loop=
</term>
<listitem>
<simpara>
Specify number of loops.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect3>
<refsect3 id="_example_of_emphasis_role_strong_pipe_emphasis">
<title>Example of <emphasis role="strong">pipe</emphasis></title>
<literallayout>
&#10;.ft C&#10;% perf bench sched pipe
(executing 1000000 pipe operations between two tasks)

        Total time:8.091 sec
                8.091833 usecs/op
                123581 ops/sec

% perf bench sched pipe -l 1000              # loop 1000
(executing 1000 pipe operations between two tasks)

        Total time:0.016 sec
                16.948000 usecs/op
                59004 ops/sec&#10;.ft&#10;
</literallayout>
</refsect3>
</refsect2>
<refsect2 id="_suites_for_emphasis_mem_emphasis">
<title>SUITES FOR <emphasis>mem</emphasis></title>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">memcpy</emphasis>
</term>
<listitem>
<simpara>
Suite for evaluating performance of simple memory copy in various ways.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<refsect3 id="_options_of_emphasis_role_strong_memcpy_emphasis">
<title>Options of <emphasis role="strong">memcpy</emphasis></title>
<variablelist>
<varlistentry>
<term>
-l
</term>
<term>
--length
</term>
<listitem>
<simpara>
Specify length of memory to copy (default: 1MB).
Available units are B, KB, MB, GB and TB (case insensitive).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-r
</term>
<term>
--routine
</term>
<listitem>
<simpara>
Specify routine to copy (default: default).
Available routines are depend on the architecture.
On x86-64, x86-64-unrolled, x86-64-movsq and x86-64-movsb are supported.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-i
</term>
<term>
--iterations
</term>
<listitem>
<simpara>
Repeat memcpy invocation this number of times.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-c
</term>
<term>
--cycle
</term>
<listitem>
<simpara>
Use perf&#8217;s cpu-cycles event instead of gettimeofday syscall.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-o
</term>
<term>
--only-prefault
</term>
<listitem>
<simpara>
Show only the result with page faults before memcpy.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-n
</term>
<term>
--no-prefault
</term>
<listitem>
<simpara>
Show only the result without page faults before memcpy.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">memset</emphasis>
</term>
<listitem>
<simpara>
Suite for evaluating performance of simple memory set in various ways.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect3>
<refsect3 id="_options_of_emphasis_role_strong_memset_emphasis">
<title>Options of <emphasis role="strong">memset</emphasis></title>
<variablelist>
<varlistentry>
<term>
-l
</term>
<term>
--length
</term>
<listitem>
<simpara>
Specify length of memory to set (default: 1MB).
Available units are B, KB, MB, GB and TB (case insensitive).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-r
</term>
<term>
--routine
</term>
<listitem>
<simpara>
Specify routine to set (default: default).
Available routines are depend on the architecture.
On x86-64, x86-64-unrolled, x86-64-stosq and x86-64-stosb are supported.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-i
</term>
<term>
--iterations
</term>
<listitem>
<simpara>
Repeat memset invocation this number of times.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-c
</term>
<term>
--cycle
</term>
<listitem>
<simpara>
Use perf&#8217;s cpu-cycles event instead of gettimeofday syscall.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-o
</term>
<term>
--only-prefault
</term>
<listitem>
<simpara>
Show only the result with page faults before memset.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-n
</term>
<term>
--no-prefault
</term>
<listitem>
<simpara>
Show only the result without page faults before memset.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect3>
</refsect2>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>perf</refentrytitle><manvolnum>1</manvolnum>
</citerefentry></simpara>
</refsect1>
</refentry>
