'\" t
.\"     Title: perf-script
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/19/2013
.\"    Manual: perf Manual
.\"    Source: perf
.\"  Language: English
.\"
.TH "PERF\-SCRIPT" "1" "03/19/2013" "perf" "perf Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
perf-script \- Read perf\&.data (created by perf record) and display trace output
.SH "SYNOPSIS"
.sp
.nf
\fIperf script\fR [<options>]
\fIperf script\fR [<options>] record <script> [<record\-options>] <command>
\fIperf script\fR [<options>] report <script> [script\-args]
\fIperf script\fR [<options>] <script> <required\-script\-args> [<record\-options>] <command>
\fIperf script\fR [<options>] <top\-script> [script\-args]
.fi
.SH "DESCRIPTION"
.sp
This command reads the input file and displays the trace recorded\&.
.sp
There are several variants of perf script:
.sp
.if n \{\
.RS 4
.\}
.nf
\*(Aqperf script\*(Aq to see a detailed trace of the workload that was
recorded\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
You can also run a set of pre\-canned scripts that aggregate and
summarize the raw trace data in various ways (the list of scripts is
available via \*(Aqperf script \-l\*(Aq)\&.  The following variants allow you to
record and run those scripts:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\*(Aqperf script record <script> <command>\*(Aq to record the events required
for \*(Aqperf script report\*(Aq\&.  <script> is the name displayed in the
output of \*(Aqperf script \-\-list\*(Aq i\&.e\&. the actual script name minus any
language extension\&.  If <command> is not specified, the events are
recorded using the \-a (system\-wide) \*(Aqperf record\*(Aq option\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\*(Aqperf script report <script> [args]\*(Aq to run and display the results
of <script>\&.  <script> is the name displayed in the output of \*(Aqperf
trace \-\-list\*(Aq i\&.e\&. the actual script name minus any language
extension\&.  The perf\&.data output from a previous run of \*(Aqperf script
record <script>\*(Aq is used and should be present for this command to
succeed\&.  [args] refers to the (mainly optional) args expected by
the script\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\*(Aqperf script <script> <required\-script\-args> <command>\*(Aq to both
record the events required for <script> and to run the <script>
using \*(Aqlive\-mode\*(Aq i\&.e\&. without writing anything to disk\&.  <script>
is the name displayed in the output of \*(Aqperf script \-\-list\*(Aq i\&.e\&. the
actual script name minus any language extension\&.  If <command> is
not specified, the events are recorded using the \-a (system\-wide)
\*(Aqperf record\*(Aq option\&.  If <script> has any required args, they
should be specified before <command>\&.  This mode doesn\*(Aqt allow for
optional script args to be specified; if optional script args are
desired, they can be specified using separate \*(Aqperf script record\*(Aq
and \*(Aqperf script report\*(Aq commands, with the stdout of the record step
piped to the stdin of the report script, using the \*(Aq\-o \-\*(Aq and \*(Aq\-i \-\*(Aq
options of the corresponding commands\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\*(Aqperf script <top\-script>\*(Aq to both record the events required for
<top\-script> and to run the <top\-script> using \*(Aqlive\-mode\*(Aq
i\&.e\&. without writing anything to disk\&.  <top\-script> is the name
displayed in the output of \*(Aqperf script \-\-list\*(Aq i\&.e\&. the actual
script name minus any language extension; a <top\-script> is defined
as any script name ending with the string \*(Aqtop\*(Aq\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
[<record\-options>] can be passed to the record steps of \*(Aqperf script
record\*(Aq and \*(Aqlive\-mode\*(Aq variants; this isn\*(Aqt possible however for
<top\-script> \*(Aqlive\-mode\*(Aq or \*(Aqperf script report\*(Aq variants\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
See the \*(AqSEE ALSO\*(Aq section for links to language\-specific
information on how to write and run your own trace scripts\&.
.fi
.if n \{\
.RE
.\}
.SH "OPTIONS"
.PP
<command>\&...
.RS 4
Any command you can specify in a shell\&.
.RE
.PP
\-D, \-\-dump\-raw\-script=
.RS 4
Display verbose dump of the trace data\&.
.RE
.PP
\-L, \-\-Latency=
.RS 4
Show latency attributes (irqs/preemption disabled, etc)\&.
.RE
.PP
\-l, \-\-list=
.RS 4
Display a list of available trace scripts\&.
.RE
.PP
\-s [\fIlang\fR], \-\-script=
.RS 4
Process trace data with the given script ([lang]:script[\&.ext])\&. If the string
\fIlang\fR
is specified in place of a script name, a list of supported languages will be displayed instead\&.
.RE
.PP
\-g, \-\-gen\-script=
.RS 4
Generate perf\-script\&.[ext] starter script for given language, using current perf\&.data\&.
.RE
.PP
\-a
.RS 4
Force system\-wide collection\&. Scripts run without a <command> normally use \-a by default, while scripts run with a <command> normally don\(cqt \- this option allows the latter to be run in system\-wide mode\&.
.RE
.PP
\-i, \-\-input=
.RS 4
Input file name\&. (default: perf\&.data unless stdin is a fifo)
.RE
.PP
\-d, \-\-debug\-mode
.RS 4
Do various checks like samples ordering and lost events\&.
.RE
.PP
\-f, \-\-fields
.RS 4
Comma separated list of fields to print\&. Options are: comm, tid, pid, time, cpu, event, trace, ip, sym, dso, addr, symoff\&. Field list can be prepended with the type, trace, sw or hw, to indicate to which event type the field list applies\&. e\&.g\&., \-f sw:comm,tid,time,ip,sym and \-f trace:time,cpu,trace
.sp
.if n \{\
.RS 4
.\}
.nf
perf script \-f <fields>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
is equivalent to:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
perf script \-f trace:<fields> \-f sw:<fields> \-f hw:<fields>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
i\&.e\&., the specified fields apply to all event types if the type string
is not given\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The arguments are processed in the order received\&. A later usage can
reset a prior request\&. e\&.g\&.:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\-f trace: \-f comm,tid,time,ip,sym
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The first \-f suppresses trace events (field list is ""), but then the
second invocation sets the fields to comm,tid,time,ip,sym\&. In this case a
warning is given to the user:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
"Overriding previous field request for all events\&."
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Alternativey, consider the order:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\-f comm,tid,time,ip,sym \-f trace:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The first \-f sets the fields for all events and the second \-f
suppresses trace events\&. The user is given a warning message about
the override, and the result of the above is that only S/W and H/W
events are displayed with the given fields\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
For the \*(Aqwildcard\*(Aq option if a user selected field is invalid for an
event type, a message is displayed to the user that the option is
ignored for that type\&. For example:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
$ perf script \-f comm,tid,trace
\*(Aqtrace\*(Aq not valid for hardware events\&. Ignoring\&.
\*(Aqtrace\*(Aq not valid for software events\&. Ignoring\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Alternatively, if the type is given an invalid field is specified it
is an error\&. For example:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
perf script \-v \-f sw:comm,tid,trace
\*(Aqtrace\*(Aq not valid for software events\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
At this point usage is displayed, and perf\-script exits\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Finally, a user may not set fields to none for all event types\&.
i\&.e\&., \-f "" is not allowed\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-k, \-\-vmlinux=<file>
.RS 4
vmlinux pathname
.RE
.PP
\-\-kallsyms=<file>
.RS 4
kallsyms pathname
.RE
.PP
\-\-symfs=<directory>
.RS 4
Look for files with symbols relative to this directory\&.
.RE
.PP
\-G, \-\-hide\-call\-graph
.RS 4
When printing symbols do not display call chain\&.
.RE
.PP
\-C, \-\-cpu
.RS 4
Only report samples for the list of CPUs provided\&. Multiple CPUs can be provided as a comma\-separated list with no space: 0,1\&. Ranges of CPUs are specified with \-: 0\-2\&. Default is to report samples on all CPUs\&.
.RE
.PP
\-c, \-\-comms=
.RS 4
Only display events for these comms\&. CSV that understands
\m[blue]\fBfile://filename\fR\m[]
entries\&.
.RE
.PP
\-I, \-\-show\-info
.RS 4
Display extended information about the perf\&.data file\&. This adds information which may be very large and thus may clutter the display\&. It currently includes: cpu and numa topology of the host system\&. It can only be used with the perf script report mode\&.
.RE
.PP
\-\-show\-kernel\-path
.RS 4
Try to resolve the path of [kernel\&.kallsyms]
.RE
.SH "SEE ALSO"
.sp
\fBperf-record\fR(1), \fBperf-script-perl\fR(1), \fBperf-script-python\fR(1)
