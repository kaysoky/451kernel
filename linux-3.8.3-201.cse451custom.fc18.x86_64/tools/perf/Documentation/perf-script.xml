<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>perf-script</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">perf</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">perf Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>perf-script</refname>
  <refpurpose>Read perf.data (created by perf record) and display trace output</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<blockquote>
<literallayout><emphasis>perf script</emphasis> [&lt;options&gt;]
<emphasis>perf script</emphasis> [&lt;options&gt;] record &lt;script&gt; [&lt;record-options&gt;] &lt;command&gt;
<emphasis>perf script</emphasis> [&lt;options&gt;] report &lt;script&gt; [script-args]
<emphasis>perf script</emphasis> [&lt;options&gt;] &lt;script&gt; &lt;required-script-args&gt; [&lt;record-options&gt;] &lt;command&gt;
<emphasis>perf script</emphasis> [&lt;options&gt;] &lt;top-script&gt; [script-args]</literallayout>
</blockquote>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>This command reads the input file and displays the trace recorded.</simpara>
<simpara>There are several variants of perf script:</simpara>
<literallayout class="monospaced">'perf script' to see a detailed trace of the workload that was
recorded.</literallayout>
<literallayout class="monospaced">You can also run a set of pre-canned scripts that aggregate and
summarize the raw trace data in various ways (the list of scripts is
available via 'perf script -l').  The following variants allow you to
record and run those scripts:</literallayout>
<literallayout class="monospaced">'perf script record &lt;script&gt; &lt;command&gt;' to record the events required
for 'perf script report'.  &lt;script&gt; is the name displayed in the
output of 'perf script --list' i.e. the actual script name minus any
language extension.  If &lt;command&gt; is not specified, the events are
recorded using the -a (system-wide) 'perf record' option.</literallayout>
<literallayout class="monospaced">'perf script report &lt;script&gt; [args]' to run and display the results
of &lt;script&gt;.  &lt;script&gt; is the name displayed in the output of 'perf
trace --list' i.e. the actual script name minus any language
extension.  The perf.data output from a previous run of 'perf script
record &lt;script&gt;' is used and should be present for this command to
succeed.  [args] refers to the (mainly optional) args expected by
the script.</literallayout>
<literallayout class="monospaced">'perf script &lt;script&gt; &lt;required-script-args&gt; &lt;command&gt;' to both
record the events required for &lt;script&gt; and to run the &lt;script&gt;
using 'live-mode' i.e. without writing anything to disk.  &lt;script&gt;
is the name displayed in the output of 'perf script --list' i.e. the
actual script name minus any language extension.  If &lt;command&gt; is
not specified, the events are recorded using the -a (system-wide)
'perf record' option.  If &lt;script&gt; has any required args, they
should be specified before &lt;command&gt;.  This mode doesn't allow for
optional script args to be specified; if optional script args are
desired, they can be specified using separate 'perf script record'
and 'perf script report' commands, with the stdout of the record step
piped to the stdin of the report script, using the '-o -' and '-i -'
options of the corresponding commands.</literallayout>
<literallayout class="monospaced">'perf script &lt;top-script&gt;' to both record the events required for
&lt;top-script&gt; and to run the &lt;top-script&gt; using 'live-mode'
i.e. without writing anything to disk.  &lt;top-script&gt; is the name
displayed in the output of 'perf script --list' i.e. the actual
script name minus any language extension; a &lt;top-script&gt; is defined
as any script name ending with the string 'top'.</literallayout>
<literallayout class="monospaced">[&lt;record-options&gt;] can be passed to the record steps of 'perf script
record' and 'live-mode' variants; this isn't possible however for
&lt;top-script&gt; 'live-mode' or 'perf script report' variants.</literallayout>
<literallayout class="monospaced">See the 'SEE ALSO' section for links to language-specific
information on how to write and run your own trace scripts.</literallayout>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
&lt;command&gt;&#8230;
</term>
<listitem>
<simpara>
        Any command you can specify in a shell.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-D
</term>
<term>
--dump-raw-script=
</term>
<listitem>
<simpara>
        Display verbose dump of the trace data.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-L
</term>
<term>
--Latency=
</term>
<listitem>
<simpara>
        Show latency attributes (irqs/preemption disabled, etc).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-l
</term>
<term>
--list=
</term>
<listitem>
<simpara>
        Display a list of available trace scripts.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-s [<emphasis>lang</emphasis>]
</term>
<term>
--script=
</term>
<listitem>
<simpara>
        Process trace data with the given script ([lang]:script[.ext]).
        If the string <emphasis>lang</emphasis> is specified in place of a script name, a
        list of supported languages will be displayed instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-g
</term>
<term>
--gen-script=
</term>
<listitem>
<simpara>
        Generate perf-script.[ext] starter script for given language,
        using current perf.data.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-a
</term>
<listitem>
<simpara>
        Force system-wide collection.  Scripts run without a &lt;command&gt;
        normally use -a by default, while scripts run with a &lt;command&gt;
        normally don&#8217;t - this option allows the latter to be run in
        system-wide mode.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-i
</term>
<term>
--input=
</term>
<listitem>
<simpara>
        Input file name. (default: perf.data unless stdin is a fifo)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-d
</term>
<term>
--debug-mode
</term>
<listitem>
<simpara>
        Do various checks like samples ordering and lost events.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-f
</term>
<term>
--fields
</term>
<listitem>
<simpara>
        Comma separated list of fields to print. Options are:
        comm, tid, pid, time, cpu, event, trace, ip, sym, dso, addr, symoff.
        Field list can be prepended with the type, trace, sw or hw,
        to indicate to which event type the field list applies.
        e.g., -f sw:comm,tid,time,ip,sym  and -f trace:time,cpu,trace
</simpara>
<literallayout class="monospaced">perf script -f &lt;fields&gt;</literallayout>
<literallayout class="monospaced">is equivalent to:</literallayout>
<literallayout class="monospaced">perf script -f trace:&lt;fields&gt; -f sw:&lt;fields&gt; -f hw:&lt;fields&gt;</literallayout>
<literallayout class="monospaced">i.e., the specified fields apply to all event types if the type string
is not given.</literallayout>
<literallayout class="monospaced">The arguments are processed in the order received. A later usage can
reset a prior request. e.g.:</literallayout>
<literallayout class="monospaced">-f trace: -f comm,tid,time,ip,sym</literallayout>
<literallayout class="monospaced">The first -f suppresses trace events (field list is ""), but then the
second invocation sets the fields to comm,tid,time,ip,sym. In this case a
warning is given to the user:</literallayout>
<literallayout class="monospaced">"Overriding previous field request for all events."</literallayout>
<literallayout class="monospaced">Alternativey, consider the order:</literallayout>
<literallayout class="monospaced">-f comm,tid,time,ip,sym -f trace:</literallayout>
<literallayout class="monospaced">The first -f sets the fields for all events and the second -f
suppresses trace events. The user is given a warning message about
the override, and the result of the above is that only S/W and H/W
events are displayed with the given fields.</literallayout>
<literallayout class="monospaced">For the 'wildcard' option if a user selected field is invalid for an
event type, a message is displayed to the user that the option is
ignored for that type. For example:</literallayout>
<literallayout class="monospaced">$ perf script -f comm,tid,trace
'trace' not valid for hardware events. Ignoring.
'trace' not valid for software events. Ignoring.</literallayout>
<literallayout class="monospaced">Alternatively, if the type is given an invalid field is specified it
is an error. For example:</literallayout>
<literallayout class="monospaced">perf script -v -f sw:comm,tid,trace
'trace' not valid for software events.</literallayout>
<literallayout class="monospaced">At this point usage is displayed, and perf-script exits.</literallayout>
<literallayout class="monospaced">Finally, a user may not set fields to none for all event types.
i.e., -f "" is not allowed.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
-k
</term>
<term>
--vmlinux=&lt;file&gt;
</term>
<listitem>
<simpara>
        vmlinux pathname
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--kallsyms=&lt;file&gt;
</term>
<listitem>
<simpara>
        kallsyms pathname
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--symfs=&lt;directory&gt;
</term>
<listitem>
<simpara>
        Look for files with symbols relative to this directory.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-G
</term>
<term>
--hide-call-graph
</term>
<listitem>
<simpara>
        When printing symbols do not display call chain.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-C
</term>
<term>
--cpu
</term>
<listitem>
<simpara>
Only report samples for the list of CPUs provided. Multiple CPUs can
        be provided as a comma-separated list with no space: 0,1. Ranges of
        CPUs are specified with -: 0-2. Default is to report samples on all
        CPUs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-c
</term>
<term>
--comms=
</term>
<listitem>
<simpara>
        Only display events for these comms. CSV that understands
        <ulink url="file://filename">file://filename</ulink> entries.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-I
</term>
<term>
--show-info
</term>
<listitem>
<simpara>
        Display extended information about the perf.data file. This adds
        information which may be very large and thus may clutter the display.
        It currently includes: cpu and numa topology of the host system.
        It can only be used with the perf script report mode.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--show-kernel-path
</term>
<listitem>
<simpara>
        Try to resolve the path of [kernel.kallsyms]
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>perf-record</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>perf-script-perl</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>perf-script-python</refentrytitle><manvolnum>1</manvolnum>
</citerefentry></simpara>
</refsect1>
</refentry>
